<?phpnamespace Utils;class ImageUpload {    //default value    var $thumb_square_size 		= 200; //Thumbnail will be 200x200    var $big_image_max_size 	= 500; //Image Maximum height or width    var $thumb_prefix			= "thumb_"; //Normal thumb Prefix    var $destination_directory;  //specify upload directory ends with / (slash)    var $quality 				= 90; //jpeg quality    var $random_number;     // Random number will be added after image name rand(0, 9999999999)    //--------------------Image info---------------------//    var $image_name;    var $new_image_name;    var $image_size;    var $image_type;    var $temp_src;    var $cur_width;    var $cur_height;    var $dest_rand_image_name;    var $thumb_dest_rand_image_name;    //--------------------------------------------------//    var $files;    var $file_key;    function __construct($file,$key){        $this->files = $file;        $this->file_key = $key;        $this->random_number = rand(0, 9999999999);        $this->destination_directory = realpath('upload/').'/';        $this->getImageInfo();    }    function getImageInfo(){        $this->image_name 		= str_replace(' ','-',strtolower($this->files[$this->file_key]['name'])); //get image name        $this->image_size 		= $this->files[$this->file_key]['size']; // get original image size        $this->temp_src	 	    = $this->files[$this->file_key]['tmp_name']; // Temp name of image file stored in PHP tmp folder        $this->image_type 	    = $this->files[$this->file_key]['type']; //get file type, returns "image/png", image/jpeg, text/plain etc.        //PHP getimagesize() function returns height/width from image file stored in PHP tmp folder.        //Get first two values from image, width and height.        //list assign svalues to $this->cur_width,$this->cur_height        list($this->cur_width,$this->cur_height)=getimagesize($this->temp_src);        //Get file extension from Image name, this will be added after random name        $image_ext = substr($this->image_name, strrpos($this->image_name, '.'));        $image_ext = str_replace('.','',$image_ext);        //remove extension from filename        $this->image_name 		= preg_replace("/\\.[^.\\s]{3,4}$/", "", $this->image_name);        //Construct a new name with random number and extension.        $this->new_image_name = $this->image_name.'-'.$this->random_number.'.'.$image_ext;        //set the Destination Image        $this->thumb_dest_rand_image_name 	    = $this->destination_directory.$this->thumb_prefix.$this->new_image_name; //Thumbnail name with destination directory        $this->dest_rand_image_name 			= $this->destination_directory.$this->new_image_name; // Image with destination directory    }    function createImage(){        //Let's check allowed $this->image_type, we use PHP SWITCH statement here        switch(strtolower($this->image_type))        {            case 'image/png':                //Create a new image from file                $created_image =  imagecreatefrompng($this->files[$this->file_key]['tmp_name']);                break;            case 'image/gif':                $created_image =  imagecreatefromgif($this->files[$this->file_key]['tmp_name']);                break;            case 'image/jpeg':            case 'image/pjpeg':                $created_image = imagecreatefromjpeg($this->files[$this->file_key]['tmp_name']);                break;            default:                die('Unsupported File!'); //output error and exit        }        return $created_image;    }    // This function will proportionally resize image    function resizeImage() {                $src_image = $this->createImage();        //Check Image size is not 0        if($this->cur_width <= 0 || $this->cur_height <= 0)        {            return false;        }        //Construct a proportional size of new image        $image_scale      	= min($this->big_image_max_size/$this->cur_width, $this->big_image_max_size/$this->cur_height);        $new_width  			= ceil($image_scale*$this->cur_width);        $new_height 			= ceil($image_scale*$this->cur_height);        $new_canves 			= imagecreatetruecolor($new_width, $new_height);        // Resize Image        if(imagecopyresampled($new_canves, $src_image,0, 0, 0, 0, $new_width, $new_height, $this->cur_width, $this->cur_height))        {            switch(strtolower($this->image_type))            {                case 'image/png':                    imagepng($new_canves);                    break;                case 'image/gif':                    imagegif($new_canves,$this->dest_rand_image_name);                    break;                case 'image/jpeg':                case 'image/pjpeg':                    imagejpeg($new_canves,$this->dest_rand_image_name,$this->quality);                    break;                default:                    return false;            }            //Destroy image, frees memory            if(is_resource($new_canves)) {imagedestroy($new_canves);}            return true;        }    }    //This function corps image to create exact square images, no matter what its original size!    function cropImage()    {                //Check Image size is not 0        if($this->cur_width <= 0 || $this->cur_height <= 0)        {            return false;        }        //abeautifulsite.net has excellent article about "Cropping an Image to Make Square bit.ly/1gTwXW9        if($this->cur_width>$this->cur_height)        {            $y_offset = 0;            $x_offset = ($this->cur_width - $this->cur_height) / 2;            $square_size 	= $this->cur_width - ($x_offset * 2);        }else{            $x_offset = 0;            $y_offset = ($this->cur_height - $this->cur_width) / 2;            $square_size = $this->cur_height - ($y_offset * 2);        }        $new_canves 	= imagecreatetruecolor($this->thumb_square_size, $this->thumb_square_size);        if(imagecopyresampled($new_canves, $this->createImage(),0, 0, $x_offset, $y_offset, $this->thumb_square_size, $this->thumb_square_size, $square_size, $square_size))        {            switch(strtolower($this->image_type))            {                case 'image/png':                    imagepng($new_canves,$this->thumb_dest_rand_image_name);                    break;                case 'image/gif':                    imagegif($new_canves,$this->thumb_dest_rand_image_name);                    break;                case 'image/jpeg':                case 'image/pjpeg':                    imagejpeg($new_canves,$this->thumb_dest_rand_image_name,$this->quality);                    break;                default:                    return false;            }            //Destroy image, frees memory            if(is_resource($new_canves)) {imagedestroy($new_canves);}            return true;        }    }}